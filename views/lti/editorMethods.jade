div#overflowModal.confirm-modal-wrapper.hidden
  div.confirm-modal
    h4.modal-title
      | Youâ€™ve reached the total space available in the table view.
    div.modal-content
      | You have a few options:
      ol
        li
          | Remove formatting or text in the table, and keep working in this view.
          a.cancel-link Yes, stay here!
        li
          | Continue adding content in the free text space below. This will not display in the table view.
          a.confirm-link Got it, take me there
    p.dismiss-message
      input#dismissCheckbox(type="checkbox")
      label Got it! Don't show me this message again
  script
    :babel
      const checkbox = document.querySelector('#dismissCheckbox');
      checkbox.addEventListener('change', function() {
        localStorage.setItem('dismiss', checkbox.checked);
      });

      const cancelLink = document.querySelector('#overflowModal .cancel-link');
      cancelLink.addEventListener('click', () => hideOverflowModal());

script
  :babel
    function initializeCKEditor(isBmc = false) {
        CKEDITOR.on('instanceCreated', function (e) {
          const bindOnChange = () =>  e.editor.on('change', onEditorChange);
          const unbindOnChange = () => e.editor.removeListener('change', onEditorChange);

          e.editor.on('focus', bindOnChange);
          e.editor.on('blur', unbindOnChange);
        });

        const editors = document.querySelectorAll('.editor');

        for (var i = 0; i < editors.length; i++) {
          const editor = editors[i];

          if (editor.id.indexOf('canvas-') !== -1) {
            CKEDITOR.inline(editor.id, {
              extraPlugins: 'sharedspace,htmlwriter,wordcount,notification',
              removePlugins: 'resize, save',
              sharedSpaces: { top: 'ckeditor-toolbar' },
              on: {
                key: canvasEditorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: -1 //charLimit
              }
            })
          } else {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'htmlwriter,wordcount,notification',
              on: {
                key: editorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: -1 //charLimit
              }
            })
          }
        }
      }

      function saveData(form) {
        const isCanvasForm = form.classList.contains('canvas-form');
        const successMessage = isCanvasForm
          ? document.querySelector('.canvas-control-container .success-message')
          : form.querySelector('.success-message')

        const xhr = new XMLHttpRequest()

        const textareaId = form.querySelector('textarea').id;
        const editor = CKEDITOR.instances[textareaId];
        const data = editor.getData();

        xhr.onreadystatechange = () => {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              successMessage.classList.remove('hidden');

              setTimeout(() => {
                successMessage.classList.add('hidden');
              }, 5000)

            } else {
              throw new Error(xhr, xhr.status)
            }
          }
        }

        xhr.onerror = () => {
          throw new Error(xhr, xhr.status)
        }

        xhr.open('POST', form.action, true)
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhr.send(JSON.stringify({ data }))
      }

      function editorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = `canvas-${this.name}`

        // if the deliverable has no canvas there'll be no binded editors
        if (CKEDITOR.instances[bindedEditorId]) {
          if (this.timeoutId) {
            clearTimeout(this.timeoutId)
          }

          this.timeoutId = setTimeout(() =>
            CKEDITOR.instances[bindedEditorId].setData(
              CKEDITOR.instances[editorId].getData()
            ), 100)
        }
      }

      function showOverflowModal(editor) {
        const modal = document.querySelector('#overflowModal');
        modal.classList.remove('hidden');
        modal.querySelector('.confirm-link').addEventListener('click', () => focusEditor(editor))
      }

      function hideOverflowModal() {
        const modal = document.querySelector('#overflowModal');
        modal.classList.add('hidden');

        // remove event listeners
        const confirmButton = modal.querySelector('.confirm-link');
        confirmButton.parentNode.replaceChild(confirmButton.cloneNode(true), confirmButton);
      }

      function canvasEditorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = editorId.replace('canvas-', '')

        if (this.timeoutId) {
          clearTimeout(this.timeoutId)
        }

        this.timeoutId = setTimeout(() => {
            const editor = CKEDITOR.instances[editorId];
            const data = editor.getData();
            const dataLength = editor.editable().getText().trim().length;
            const maxDataLength = editor.element.$.dataset.limit;
            const bindedEditor = CKEDITOR.instances[bindedEditorId];

            // calculate overflow
            const editorDiv = editor.element.$.nextElementSibling;
            const editorForm = editorDiv.parentNode.parentNode.parentNode;
            const isOverflowed = editorDiv.offsetHeight > editorForm.offsetHeight;

            // user can dismiss overflow message permanently
            const dismissed = localStorage.getItem('dismiss') === 'true';

            if (!dismissed && isOverflowed) {
              showOverflowModal(bindedEditor);
            }

            bindedEditor.setData(data);
          }, 100)
      }

      function onEditorChange(event) {
        if (this.autosaveTimeoutId) {
          clearTimeout(this.autosaveTimeoutId)
        }

        this.autosaveTimeoutId = setTimeout(() => {
          const form = event.editor.element.$.parentNode;
          saveData(form);
        }, 5000);
      }

      function onEditorSubmit(event) {
        event.preventDefault()

        const form = event.target;
        saveData(form);
      }

      function focusEditor(editor) {
        hideOverflowModal();
        editor.focus();
        const range = editor.createRange();
        range.moveToPosition(range.root, CKEDITOR.POSITION_BEFORE_END);
        editor.getSelection().selectRanges([range]);
      }

      function resetEditor() {
        const resetButton = this
        const editor = resetButton.dataset.editorId
        const initialData = resetButton.dataset.initialData

        CKEDITOR.instances[editor].setData(initialData)

        const bindedEditorId = `canvas-${editor}`
        if (CKEDITOR.instances[bindedEditorId]) {
          CKEDITOR.instances[bindedEditorId].setData(initialData)
        }
      }
