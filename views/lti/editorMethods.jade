script
  :babel
    function initializeCKEditor(isBmc = false) {
        const editors = document.querySelectorAll('.editor')

        editors.forEach(editor => {
          if (editor.id.indexOf('canvas-') !== -1) {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'sharedspace,htmlwriter,wordcount,notification',
              removePlugins: 'resize, save',
              sharedSpaces: { top: 'ckeditor-toolbar' },
              on: {
                key: canvasEditorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: isBmc ? 60 : -1
              }
            })
          } else {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'htmlwriter,wordcount,notification',
              on: {
                key: editorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: isBmc ? 60 : -1
              }
            })
          }
        })
      }

      function editorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = `canvas-${this.name}`

        // if the deliverable has no canvas there'll be no binded editors
        if (CKEDITOR.instances[bindedEditorId]) {
          if (this.timeoutId) {
            clearTimeout(this.timeoutId)
          }

          this.timeoutId = setTimeout(() =>
            CKEDITOR.instances[bindedEditorId].setData(
              CKEDITOR.instances[editorId].getData()
            ), 1000)
        }
      }

      function canvasEditorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = editorId.replace('canvas-', '')

        if (this.timeoutId) {
          clearTimeout(this.timeoutId)
        }

        this.timeoutId = setTimeout(() =>
          CKEDITOR.instances[bindedEditorId].setData(
            CKEDITOR.instances[editorId].getData()
          ), 1000)
      }

      function onEditorSubmit(event) {
        event.preventDefault()

        const form = event.target
        const modal = form.querySelector('.confirm-modal-wrapper')
        const successModal = form.querySelector('.success-modal-wrapper')
        const confirmButton = form.querySelector('.confirm-button')
        const cancelButton = form.querySelector('.cancel-button')

        confirmButton.addEventListener('click', saveResponse)

        cancelButton.addEventListener('click', cancelHandler)

        modal.classList.remove('hidden')

        function cancelHandler() {
          modal.classList.add('hidden')
          confirmButton.removeEventListener('click', saveResponse)
          cancelButton.removeEventListener('click', cancelHandler)
        }

        function saveResponse() {
          const xhr = new XMLHttpRequest()

          xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                modal.classList.add('hidden')
                successModal.classList.remove('hidden')
                setTimeout(() => successModal.classList.add('hidden'), 3000)
                confirmButton.removeEventListener('click', saveResponse)
                cancelButton.removeEventListener('click', cancelHandler)
              } else {
                throw new Error(xhr, xhr.status)
              }
            }
          }

          xhr.onerror = () => {
            throw new Error(xhr, xhr.status)
          }

          xhr.open('POST', form.action, true)
          xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          xhr.send(JSON.stringify({ data: form.querySelector('textarea').value }))
        }
      }

      function resetEditor() {
        const resetButton = this
        const editor = resetButton.dataset.editorId
        const initialData = resetButton.dataset.initialData

        CKEDITOR.instances[editor].setData(initialData)

        const bindedEditorId = `canvas-${editor}`
        if (CKEDITOR.instances[bindedEditorId]) {
          CKEDITOR.instances[bindedEditorId].setData(initialData)
        }
      }
