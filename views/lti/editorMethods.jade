div#overflowModal.confirm-modal-wrapper.hidden
  div.confirm-modal
    h4.modal-title
      | You have exceeded the character count on this display
    p.modal-content
      | You can continue adding data in the box below. Click OK to proceed.
    div.confirm-button
      | OK

script
  :babel
    function initializeCKEditor(isBmc = false) {
        CKEDITOR.on('instanceCreated', function (e) {
          e.editor.on('change', autosave);
        });

        const editors = document.querySelectorAll('.editor')

        editors.forEach(editor => {
          // const charLimit = editor.element.$.dataset.limit;

          if (editor.id.indexOf('canvas-') !== -1) {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'sharedspace,htmlwriter,wordcount,notification',
              removePlugins: 'resize, save',
              sharedSpaces: { top: 'ckeditor-toolbar' },
              on: {
                key: canvasEditorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: -1 //charLimit
              }
            })
          } else {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'htmlwriter,wordcount,notification',
              on: {
                key: editorOnKeyHandler
              },
              wordcount: {
                showParagraphs: false,
                showWordCount: false,
                showCharCount: true,
                countSpacesAsChars: true,
                countHTML: false,
                maxWordCount: -1,
                maxCharCount: -1 //charLimit
              }
            })
          }
        })
      }

      function autosave(event) {
        if (this.autosaveTimeoutId) {
          clearTimeout(this.autosaveTimeoutId)
        }

        this.autosaveTimeoutId = setTimeout(() => {
          const form = event.editor.element.$.parentNode;
          saveData(form, event.editor.getData());
        }, 5000)
      }

      function saveData(form, data=undefined) {
        const modal = form.querySelector('.confirm-modal-wrapper')
        const successModal = form.querySelector('.success-modal-wrapper')
        const confirmButton = form.querySelector('.confirm-button')
        const cancelButton = form.querySelector('.cancel-button')

        const xhr = new XMLHttpRequest()

        if (!data) {
          data = form.querySelector('textarea').value
        }

        xhr.onreadystatechange = () => {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              modal.classList.add('hidden')
              successModal.classList.remove('hidden')
              setTimeout(() => successModal.classList.add('hidden'), 3000)

              // remove event listeners by cloning DOM nodes
              confirmButton.parentNode.replaceChild(confirmButton.cloneNode(true), confirmButton);
              cancelButton.parentNode.replaceChild(cancelButton.cloneNode(true), cancelButton);

            } else {
              throw new Error(xhr, xhr.status)
            }
          }
        }

        xhr.onerror = () => {
          throw new Error(xhr, xhr.status)
        }

        xhr.open('POST', form.action, true)
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhr.send(JSON.stringify({ data }))
      }

      function editorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = `canvas-${this.name}`

        // if the deliverable has no canvas there'll be no binded editors
        if (CKEDITOR.instances[bindedEditorId]) {
          if (this.timeoutId) {
            clearTimeout(this.timeoutId)
          }

          this.timeoutId = setTimeout(() =>
            CKEDITOR.instances[bindedEditorId].setData(
              CKEDITOR.instances[editorId].getData()
            ), 100)
        }
      }

      function showOverflowModal(editor) {
        const modal = document.querySelector('#overflowModal');
        modal.classList.remove('hidden');
        modal.querySelector('.confirm-button').addEventListener('click', () => focusEditor(editor))
      }

      function hideOverflowModal() {
        const modal = document.querySelector('#overflowModal');
        modal.classList.add('hidden');

        // remove event listeners
        const confirmButton = modal.querySelector('.confirm-button');
        confirmButton.parentNode.replaceChild(confirmButton.cloneNode(true), confirmButton);
      }

      function canvasEditorOnKeyHandler() {
        const editorId = this.name
        const bindedEditorId = editorId.replace('canvas-', '')

        if (this.timeoutId) {
          clearTimeout(this.timeoutId)
        }

        this.timeoutId = setTimeout(() => {
            const editor = CKEDITOR.instances[editorId];
            const data = editor.getData();
            const dataLength = editor.editable().getText().trim().length;
            const maxDataLength = editor.element.$.dataset.limit;
            const bindedEditor = CKEDITOR.instances[bindedEditorId];

            if (false && dataLength > maxDataLength) {
              showOverflowModal(bindedEditor);
            }

            bindedEditor.setData(data);
          }, 100)
      }

      function onEditorSubmit(event) {
        event.preventDefault()

        const form = event.target
        const modal = form.querySelector('.confirm-modal-wrapper')
        const confirmButton = form.querySelector('.confirm-button')
        const cancelButton = form.querySelector('.cancel-button')

        confirmButton.addEventListener('click', () => saveData(form))
        cancelButton.addEventListener('click', cancelHandler)

        modal.classList.remove('hidden')

        function cancelHandler() {
          modal.classList.add('hidden')

          // remove event listeners by cloning DOM nodes
          confirmButton.parentNode.replaceChild(confirmButton.cloneNode(true), confirmButton);
          cancelButton.parentNode.replaceChild(cancelButton.cloneNode(true), cancelButton);
        }
      }

      function focusEditor(editor) {
        hideOverflowModal();
        editor.focus();
        const range = editor.createRange();
        range.moveToPosition(range.root, CKEDITOR.POSITION_BEFORE_END);
        editor.getSelection().selectRanges([range]);
        window.scrollBy(0, 400);
      }

      function resetEditor() {
        const resetButton = this
        const editor = resetButton.dataset.editorId
        const initialData = resetButton.dataset.initialData

        CKEDITOR.instances[editor].setData(initialData)

        const bindedEditorId = `canvas-${editor}`
        if (CKEDITOR.instances[bindedEditorId]) {
          CKEDITOR.instances[bindedEditorId].setData(initialData)
        }
      }
