script
  :babel
    function initializeCKEditor() {
        const editors = document.querySelectorAll('.editor')

        editors.forEach(editor => {
          if (editor.id.indexOf('canvas-') !== -1) {
            CKEDITOR.replace(editor.id, {
              extraPlugins: 'sharedspace',
              removePlugins: 'resize',
              sharedSpaces: { top: 'ckeditor-toolbar' },
              on: {
                key: () => {
                  const bindedEditorId = editor.id.replace('canvas-', '')

                  setTimeout(() => CKEDITOR.instances[bindedEditorId].setData(
                    CKEDITOR.instances[editor.id].getData()
                  ), 0)
                }
              }
            })
          } else {
            CKEDITOR.replace(editor.id, {
              on: {
                key: () => {
                  const bindedEditorId = `canvas-${editor.id}`

                  // if the deliverable has no canvas there'll be no binded editors
                  if (CKEDITOR.instances[bindedEditorId]) {
                    setTimeout(() => CKEDITOR.instances[bindedEditorId].setData(
                      CKEDITOR.instances[editor.id].getData()
                    ), 0)
                  }
                }
              }
            })
          }
        })
      }

      function onEditorSubmit(event) {
        event.preventDefault()
        const form = event.target
        const modal = form.querySelector('.confirm-modal-wrapper')
        const successModal = form.querySelector('.success-modal-wrapper')
        const confirmButton = form.querySelector('.confirm-button')
        const cancelButton = form.querySelector('.cancel-button')

        confirmButton.addEventListener('click', () => {
          const xhr = new XMLHttpRequest()

          xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                modal.classList.add('hidden')
                successModal.classList.remove('hidden')
                setTimeout(() => successModal.classList.add('hidden'), 3000)
              } else {
                throw new Error(xhr, xhr.status)
              }
            }
          }

          xhr.onerror = () => {
            throw new Error(xhr, xhr.status)
          }

          xhr.open('POST', form.action, true)
          xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          xhr.send(JSON.stringify({ data: form.querySelector('textarea').value }))
        })

        cancelButton.addEventListener('click', () => {
          modal.classList.add('hidden')
        })

        modal.classList.remove('hidden')
      }

      function resetEditor() {
        const resetButton = this
        const editor = resetButton.dataset.editorId
        const initialData = resetButton.dataset.initialData

        CKEDITOR.instances[editor].setData(initialData)

        const bindedEditorId = `canvas-${editor}`
        if (CKEDITOR.instances[bindedEditorId]) {
          CKEDITOR.instances[bindedEditorId].setData(initialData)
        }
      }
